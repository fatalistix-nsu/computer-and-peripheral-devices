power(long double, unsigned long):
        fldt    8(%rsp)			// Загружает в стек сопроцессора число из оперативной памяти (x)
        testq   %rdi, %rdi		// Проверяет значение с %rdi
        je      .L11			// Если в %rdi хранится 0, то прыгает на метку .L11
        fld1				// Загружает число 1 в стек сопроцессора (forRet)
        movl    $1, %eax		// Помещает число 1 в регистр %rax (i)
.L10:
        addq    $1, %rax		// Увеличивает значение в регистре %rax на 1 (i++)
        fmul    %st(1), %st		// Перемножает числа в регистрах %st и %st(1), помещает ответ в %st (forRet *= x)
        cmpq    %rax, %rdi		// Сравнивает числа в регистрах %rax и %rdi (i <= n)
        jnb     .L10			// Если i <= n, то отправляется по метке .L10
        fstp    %st(1)			// Убирает ненужные элементы в стеке
        ret				// Возвращение из функции
.L11:
        fstp    %st(0)			// Убирает верхнее значение в стеке сопроцессора (return 1)
        fld1				// Загружает число 1 на вершину стека сопроцессора
        ret				// Возвращение из функции
factorial(unsigned long):
        testq   %rdi, %rdi		// Проверяет значение %rdi
        je      .L17			// Если 0 == n, то переходит на метку .L17
        movl    $1, %eax		// Записывает число 1 в регистр %eax (i)
        fld1				// Загружает в стек сопроцессора число 1 (forRet)
.L16:
        movq    %rax, -16(%rsp)		// Копирует значение регистра %rax в оперативную память (i)
        fildq   -16(%rsp)		// Загружает из оперативной памяти целое число в стек сопроцессора (i)
        testq   %rax, %rax		// Проверяет значение в регистре %rax
        jns     .L15			// Если знак не сменился то отправляется на метку .L15
        fadds   .LC2(%rip)		// Прибавляет к значению в регистре %st число по метке .LC2 (константа, известная на этапе компиляции)
.L15:
        fmulp   %st, %st(1)		// Перемножает числа в регистрах %st и %st(1) и запоминает значение в %st(1), выталкивая %st
        addq    $1, %rax		// Увеличивает значение в регистре %rax на число 1 (i++)
        cmpq    %rax, %rdi		// Сравнивает значение в регистрах %rax и %rdi (i и n)
        jnb     .L16			// Если i <= n, то переходит на метку .L16
        ret				// Возвращается из функции
.L17:
        fld1				// Помещает в стек сопроцессора число 1 (return 1)
        ret				// Возвращается из функции
Sin(long double, unsigned long):
        pushq   %r12			// Запоминает значение регистра %r12 в стеке
        movl    $1, %eax		// Помещает в регистр %eax число 1
        pushq   %rbp			// Запоминает значение регистра %rbp в стеке (база кадра вызвавшей программы)
        movq    %rdi, %rbp		// Копирует значение из регистра %rdi (n) в регистр %rbp
        pushq   %rbx			// Запоминает значение регистра %rbx в стеке
        movl    $-1, %ebx		// Помещает число -1 в регистр %ebx
        subq    $16, %rsp		// Вычитает из значения регистра %rsp число 16, тем самым выделяя 16 байт на вергине стека
        fldt    48(%rsp)		// Загружает из оперативной памяти по адресу %rsp+48 в стек сопроцессора
        fldz				// Загружает число 0 на вершину стека сопроцессора
        fcomip  %st(1), %st		// Сравнивает число в регистрах %st(1) (x) и %st (0) и выталкивает %st
        fldl    .LC4(%rip)		// Загружает вещественное число по метке .LC14 (2 * pi)
        cmovbe  %eax, %ebx		// Помещает 1 в %ebx, если x >= 0
        seta    %r12b			// Устанавливает байт в регистр %r12b, если x < 0 (sign)
        fstpt   (%rsp)			// Помещает число из стека сопроцессора в оперативную память (2 * pi)
        movq    (%rsp), %rax		// Помещает значение из оперативной памяти в регистр %rax (2 * pi)
        movl    8(%rsp), %edx		// Помещает значение из оперативной памяти в регистр %edx (2 * pi)
        pushq   %rdx			// Помещает значение из %rdx на вершину стека (2 * pi)
        pushq   %rax			// Помещает значение из %rax на вершину стека (2 * pi)
        fabs				// Функция, высчитывающая модуль
        subq    $16, %rsp		// Выделяет память на вершине стека
        fstpt   (%rsp)			// Помещает на вершину стека оперативной памяти число из стека сопроцессора и выталкивает это число из стека сопроцессора (fabs(x))
        call    fmodl			// Вызывает функцию fmod, ее результат лежит в стеке сопроцессора
        addq    $32, %rsp		// Зачищает выделенные 32 байта по аргументы функции
        fldl    .LC5(%rip)		// Загружает константу по метке .LC5 (pi) в стек сопроцессора
        fxch    %st(1)			// Меняет местами регистры %st и %st(1) (aka swap(x, pi);
        fcomi   %st(1), %st		// Сравнивает значения в регистрах %st(1) и %st (pi и x)
        jbe     .L48			// Если pi >= x, то прыгает на метку .L48
        movzbl  %r12b, %r12d		// Присваивает %r12d значение %r12b и расширяет нулевым значением
        fsubp   %st, %st(1)		// Вычитает из значения регистра %st (x) значение регистра %st(1) (pi), сохраняет значение в регистре %st(1), выталкивает значение %st (x-=pi)
        leal    -1(%r12,%r12), %r12d	// Вычисляет адрес -1+%r12+%r12 и помещает его в %r12d
        movl    %r12d, %ebx		// Копирует значение из регистра %r12d в регистр %ebx (sign)
        jmp     .L22			// Отправляется на метку .L22
.L48:
        fstp    %st(1)			// Выкидывает значение pi из стека сопроцессора
.L22:
        fldl    .LC6(%rip)		// Загружает в стек сопроцессора число по метке .LC6 (pi/2)
        fxch    %st(1)			// Меняет местами регистры %st и %st(1) (aka swap(pi/2, x);
        fcomi   %st(1), %st		// Сравнивает значения в регистрах %st(1) и %st (pi/2 и x)
        fstp    %st(1)			// Выталкивает pi/2 из стека
        jbe     .L24			// Если pi/2 >= x, то отправляется по метке .L24
        fsubrl  .LC5(%rip)		// Загружает вещественное число по метке .LC5, из него вычитает значение в регистре %st, и помещает результат в регистр %st
.L24:
        testq   %rbp, %rbp		// Проверяет значение %rbp (n)
        je      .L36			// Если n == 0, то отправляется на метку .L36
        fldz				// Загружает число 0 в стек сопроцессора (result)
        xorl    %edx, %edx		// Зануляет значение в регистре %edx
        movl    $1, %ecx		// Помещает число 1 в регистр %ecx
        flds    .LC2(%rip)		// Загружает вещественное число по метке .LC2 (предрасчитанная константа)
        testq   %rdx, %rdx		// Проверяет значение в регистр %rdx
        je      .L37			// Если значение в %rdx == 0, то отправляется на метку .L37 (Всегда?)
.L47:
        movl    $1, %eax		// в регистр %eax помещается число 1
        fld1				// в стек сопроцессора помещается число 1
.L28:
        fchs				// Меняет знак у числа в регистре %st (-1)
        addq    $1, %rax		// Прибавляет число 1 к значению в регистре %rax
        cmpq    %rax, %rdx		// Сравнивает значения в регистрах %rax и %rdx
        jnb     .L28			// Если значение в %rax <= значение в %rdx, то отправляется на метку .L28 (pow(-1, i-1)
        movl    $1, %eax		// Помещает в регистр %eax число 1
        fld1				// Загружает в стек сопроцессора число 1
.L29:
        addq    $1, %rax		// Прибавляет к значению в регистре %rax число 1
        fmul    %st(4), %st		// Перемножает значения в регистрах %st(4) 
        cmpq    %rax, %rcx		// Сравнивает значения в регистрах %rax и %rcx 
        jnb     .L29			// Если значение в %rax <= %rcx, то переходит на метку .L29
        movq    %rcx, %rsi		// Помещает значение регистра %rcx в регистр %rsi
.L27:
        fmulp   %st, %st(1)		// Перемножает значения в регистрах %st и %st(1), результат ложит в %st(1), выталкивает %st
        movl    $1, %eax		// Помещает число 1 в регистр %eax
        fld1				// Загружает 1 в стек сопроцессора
.L31:
        movq    %rax, (%rsp)		// Копирует значение из регистра %rax в вершину стека
        fildq   (%rsp)			// Загружает целое число в стек сопроцессора из вершины стека оперативной памяти
        testq   %rax, %rax		// Проверяет значение %rax
        jns     .L30			// Если в %rax содержится положительное число, то прыгает на метку .L30
        fadd    %st(3), %st		// К значению в регистре %st прибавляется значение из регистра %st(3)
.L30:
        addq    $1, %rax		// В rax ложится число 1
        fmulp   %st, %st(1)		// Перемножает значения в регистрах %st и %st(1), результат ложит в %st(1), выталкивает %st
        cmpq    %rax, %rsi		// Сравнивает значения в регистрах %rax и %rsi
        jnb     .L31			// Если значение в %rax <= начения в регистре %rsi, то отправляется на метку .LC31
        fdivrp  %st, %st(1)		// Делит число в регистре %st(1) на число в регистре %st, записывает результат в %st(1) и выталкивает %st
        fucomi  %st(0), %st		// Сравнивает значение в регистре %st и %st(???)
        jp      .L46			// Если значения в регистрах %st и %st одинаковые, то отправляется на метку .L46
        faddp   %st, %st(2)		// Прибавляет к значению в регистре %st(2) значение в регистре %st и 
.L33:
        leaq    1(%rdx), %rax		// Помещает в регистр %rax адрес 1+(%rdx)
        addq    $2, %rdx		// Прибавляет к значению в регистре %rdx число 2
        addq    $2, %rcx		// Прибавляет к значению в регистре %rсx число 2
        cmpq    %rdx, %rbp		// Сравнивает значения в регистрах %rdx и %rbp
        jb      .L49			// Если значения: %rdx > %rbp, то переходит по метке .L49
        movq    %rax, %rdx		// Копирует значение из регистра %rax в регистр %rbx
        testq   %rdx, %rdx		// Проверяет значение %rdx
        jne     .L47			// Если %rdx != 0, то отправляется на метку .L47
.L37:
        fld     %st(2)			// Загружает в стек сопроцессора значение из стека сопроцессора из регистра %st(2)
        movl    $1, %esi		// Помещает число 1 в регистр %esi
        fld1				// Загружает число 1 в стек сопроцессора
        fxch    %st(1)			// swap(%st, %st(1))
        jmp     .L27			// Отправляется на метку .L27
.L36:
        fstp    %st(0)			// Выталкивается значение из вершины стека сопроцессора
        fldz				// В стек сопроцессора загружается число 0 (result)
        jmp     .L26			// Отправляется на метку .L26
.L49:
        fstp    %st(0)
        fstp    %st(1)
.L26:
        movl    %ebx, (%rsp)		// Помещает число из регистра %ebx в вершину стека (sign)
        fildl   (%rsp)			// Загружает из вершины стека оперативной памяти целое число в стек сопроцессора (sign)
        addq    $16, %rsp		// Затирает верхние 16 байт стека
        popq    %rbx			// Восстанавливает значение %rbx
        popq    %rbp			// Восстанавливает значение %rbp
        popq    %r12			// Восстанавливает значение %r12
        fmulp   %st, %st(1)		// Перемножает числа в регистрах %st и %st(1), помещает результат в %st(1), выталкивает %st (result * sign)
        ret				// Выход из функции
.L46:
        fstp    %st(0)			// Удаляет верхнее значение из стека сопроцессора
        fldz				// Помещает в стек сопроцессора число 0
        faddp   %st, %st(2)		// Складывает значения в регистрах %st и %st(2), помещает результат в %st(2), выталкивает %st
        jmp     .L33			// Прыгает на метку .L33

// Строковые константы
.LC8:
        .string "Answer: "
.LC10:
        .string "Time: "
.LC12:
        .string "s"
main:
        pushq   %rbx			// Сохраняет предыдущее значение регистра %rbx
        movl    $10, %edx		// Помещает число 10 в регистр %edx
        subq    $16, %rsp		// Выделяет 16 байт на вершине стека
        movq    8(%rsi), %rdi		// Копирует значение argv[1][] из регистра %rsi в регистр %rdi
        xorl    %esi, %esi		// Зануляет половину битов регистра %esi
        call    strtoll			// Вызывает функцию strtoll
        movl    $.LC8, %esi		// Помещает адрес метки со строкой
        movl    $8, %edx		// Помещает число 8 в регистр %edx
        movl    $_ZSt4cout, %edi	// Помещает адрес cout в регистр %edi
        movq    %rax, %rbx		// Копирует значение %rax (numberOfElements) в регистр %rbx

        call    std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
					// Вызывает оператор вывода << для строки "Answer: "

        flds    .LC9(%rip)		// Загружает число в стек сопроцессора из метки .LC9 long double 10
        movq    %rbx, %rdi		// Помещает значение из %rbx (numberOfElements) в регистр %rdi
        fstpt   (%rsp)			// Помещает число из регистра сопроцессора в оперативную память и выталкивает его из стека сопроцессора (long double 10)
        movq    (%rsp), %rax		// Копирует значение из оперативной памяти в регистр %rax
        movl    8(%rsp), %edx		// Копирует еще 4 байта 
        pushq   %rdx			// Помещает на вершину стека значение регистра %rdx
        pushq   %rax			// Помещает на вершину стека значение регистра %rax

        call    Sin(long double, unsigned long)
					// Вызывает функцию Sin()

        movl    $_ZSt4cout, %edi	// Помещает cout в %edi
        fstpt   (%rsp)			// Помещает число из стека сопроцессора на в оперативную память

        call    std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<long double>(long double)
					// Вызывает оператор вывода cout << для long double Sin()

        movq    %rax, %rdi		// Помещает результат вывода в регистр %rdi
        popq    %rax			// Удаляет значение с вершины стека и помещает его в регистр %rax
        popq    %rdx			// Удаляет значение с вершины стека и помещает его в регистр %rdx

        call    std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [clone .isra.0]
					// Выводит std::endl

        movl    $6, %edx		// Помещает число 6 в регистр %edx
        movl    $.LC10, %esi		// Помещает адрес метки со строкой "Time: "
        movl    $_ZSt4cout, %edi	// Помещает cout в регистр %edi

        call    std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
					// Вызывает оператор вывода строки "Time: "

        call    clock			// Вызывает функцию clock()
        subq    $16, %rsp		// Выделяет 16 байт на вершине стека
        movl    $_ZSt4cout, %edi	// Помещает cout в %edi
        movq    %rax, 16(%rsp)		// Помещает результат функции clock() в оперативную память
        fildq   16(%rsp)		// Загружает целое число clock() в стек сопроцессора
        fdivs   .LC11(%rip)		// Делит clock() в стеке сопроцессора на вещественное число по метке .LC11 (CLOCKS_PER_SEC) и помещает результат на место clock()
        fstpt   (%rsp)			// Помещает число clock() из вершины стека сопроцессора в оперативную память, после чего выталкивает его из сопроцессора

        call    std::basic_ostream<char, std::char_traits<char> >& std::basic_ostream<char, std::char_traits<char> >::_M_insert<long double>(long double)
					// Выводит long double (clock() / CLOCKS_PER_SEC)

        popq    %rcx			// Помещает значение из вершины стека оперативной памяти в регистр %rcx и удаляет его из вершины стека оперативной памяти
        movl    $1, %edx		// Помещает 1 к значению в регистре %edx
        popq    %rsi			// Помещает значение из вершины стека оперативной памяти в регистр %rsi и удаляет его из вершины стека оперативной памяти
        movq    %rax, %rbx		// Помещает результат вывода cout << в регистр %rbx
        movl    $.LC12, %esi		// Загружает адрес метки .LC12 со строкой "s" в регистр %esi
        movq    %rax, %rdi		// Копирует значение cout из регистра %rax в регистр %rdi

        call    std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)
					// Вызывает оператор вывода для строки "s"

        movq    %rbx, %rdi		// Помещает cout в регистр %rdi

        call    std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [clone .isra.0]
					// Вызывает оператор вывода для std::endl

        addq    $16, %rsp		// Прибавляет 16 к значению %rsp, затирая память в 16 байт
        xorl    %eax, %eax		// Зануляет регистр %eax
        popq    %rbx			// Возвращает значение %rbx
        ret				// Выходит из программы

_GLOBAL__sub_I_power(long double, unsigned long):
        subq    $8, %rsp
        movl    $_ZStL8__ioinit, %edi
        call    std::ios_base::Init::Init() [complete object constructor]
        movl    $__dso_handle, %edx
        movl    $_ZStL8__ioinit, %esi
        movl    $_ZNSt8ios_base4InitD1Ev, %edi
        addq    $8, %rsp
        jmp     __cxa_atexit

.LC2:
        .long   1602224128

.LC4:// 2 * pi
        .long   1413754136
        .long   1075388923

.LC5: // pi
        .long   1413754136
        .long   1074340347

.LC6: // pi / 2
        .long   1413754136
        .long   1073291771

.LC9: // long double 10
        .long   1092616192

.LC11:// CLOCKS_PER_SEC
        .long   1232348160