power(long double, unsigned long):
        pushq   %rbp			// Сохраняет указатель кадра вызвавшей подпрограммы
        movq    %rsp, %rbp		// Формирует базу стека локальных переменных
        movq    %rdi, -40(%rbp)		// Помещает значение регистра %rdi в оперативную память по адресу (%rbp)-40 (n)
        fld1				// Записывает в стек сопроцессора число 1 (forRet)
        fstpt   -16(%rbp)		// Записывает в оперативную память по адресу (%rbp)-16 число из вершины стека сопроцессора (forRet)
        movq    $1, -24(%rbp)		// Записывает в оперативную память по адресу (%rbp)-24 число 1 (i)
        jmp     .L8			// Перескакивает на метку .L8
.L9:
        fldt    -16(%rbp)		// Загружает в стек сопроцессора значение из оперативной памяти (%rbp)-16 (forRet)
        fldt    16(%rbp)		// Загружает в стек сопроцессора значение из оперативной памяти (%rbp)+16 (x)
        fmulp   %st, %st(1)		// Перемножает значение в регистре %st с значением в регистре %st(1), помещает его в регистр %st(1), выталкивает вершину, делая %sp(1) - вершиной (forRet * x)
        fstpt   -16(%rbp)		// Помещает значение из вершины стека сопроцессора в оперативную память по адресу (%rbp)-16 (forRet = forRet * x)
        addq    $1, -24(%rbp)		// Прибавляет единицу к значению в оперативной память по адресу (%rbp)-24 (i++)
.L8:
        movq    -24(%rbp), %rax		// Помещает в регистр %rax значение из оперативной памяти по адресу (%rbp)-24 (i)
        cmpq    %rax, -40(%rbp)		// Сравнивает значение в регистре %rax и значение из оперативной памяти по адресу (%rbp)-40 (i и n)
        jnb     .L9			// Если i <= n, то переходит на метку .L9
        fldt    -16(%rbp)		// Загружает в стек сопроцессора значение из оперативной памяти (%rbp)-16 (forRet)
        popq    %rbp			// Возвращает указатель кадра
        ret				// Возврат из функции
factorial(unsigned long):
        pushq   %rbp			// Сохраняет указатель кадра вызвавшей подпрограммы
        movq    %rsp, %rbp		// Формирует базу стека локальных переменных
        movq    %rdi, -40(%rbp)		// Помещает значение из регистра %rdi в оперативную память по адресу (%rbp)-40 (n)
        fld1				// Загружает число 1 в стек сопроцессора (forRet)
        fstpt   -16(%rbp)		// Загружает число 1 из стека сопроцессора в оперативную память по адресу (%rbp)-16 и выталкивает число из стека сопроцессора (forRet)
        movq    $1, -24(%rbp)		// Помещает число 1 по адресу (%rbp)-24 (i)
        jmp     .L12			// Прыгает на метку .L12
.L14:
        fildq   -24(%rbp)		// Загружает число из оперативной памяти по адресу (%rbp)-24 в стек сопроцессора (long double i)
        cmpq    $0, -24(%rbp)		// Сравнивает копию этого числа из оперативной памяти по адресу (%rbp)-24 с нулем (i и 0)
        jns     .L13			// Если флаг знака SF = 0, то переходит на метку .L13
        fldt    .LC2(%rip)		// Загружает в стек сопроцессора число по метке .LC2 (Предпроцессорная магическая константа)
        faddp   %st, %st(1)		// Складывает числа в регистрах %st и %st(1), результат помещает в %st(1), выталкивает %st
.L13:
        fldt    -16(%rbp)		// Загружает число из оперативной памяти по адресу (%rbp)-16 в стек сопроцессора (forRet)
        fmulp   %st, %st(1)		// Перемножает числа из стека сопроцессора %st и %st(1), помещает результат в %st(1) и выталкивает %st (forRet * i)
        fstpt   -16(%rbp)		// Загружает число из стека сопроцессора в оперативную память по адресу (%rbp)-16 (forRet *= i)
        addq    $1, -24(%rbp)		// Прибавляет единицу к значению в оперативной памяти по адресу (%rbp)-24 (i++)
.L12:
        movq    -24(%rbp), %rax		// Помещает число из оперативной памяти по адресу (%rbp)-24 в регистр %rax (i)
        cmpq    %rax, -40(%rbp)		// Сравнивает число из регистра %rax со значением в стеке по адресу (%rbp)-40 (i и n)
        jnb     .L14			// Если i <= n, то отправляется на метку .L14
        fldt    -16(%rbp)		// Загружает значение из оперативной памяти по адресу (%rbp)-16 в стек сопроцессора (forRet)
        popq    %rbp			// Возвращает значение %rbp
        ret				// Выходит из функции
Sin(long double, unsigned long):
        pushq   %rbp			// Сохраняет указатель кадра вызвавшей подпрограммы
        movq    %rsp, %rbp		// Формирует базу стека локальных переменных
        subq    $96, %rsp		// Выделяет 96 байт
        movq    %rdi, -72(%rbp)		// Помещает значение регистра %rdi в стек по адресу (%rbp)-72 (n)
        fldt    16(%rbp)		// Загружает в стек сопроцессора второй аргумент подпрограммы (long double x)
        fldz				// Загружает в стек константу +0.0
        fcomip  %st(1), %st		// Сравнивает значение x с нулем с установкой EFLAGS, выталкивает ноль
        fstp    %st(0)			// Очищает вершину стека (выталкивает число 0)
        jbe     .L32			// Если x >= 0, то перходит на метку .L32
        movl    $-1, %eax		// Помещает в регистр %eax число -1
        jmp     .L19			// Переходит на метку .L19
.L32:
        movl    $1, %eax		// Помещает в регистр %rax число 1
.L19:
        movl    %eax, -4(%rbp)		// Помещает значение регистра %eax в стек по адресу (%rbp)-4 (sign)
        pushq   24(%rbp)		// Помещает на вершину стека первую половину числа x
        pushq   16(%rbp)		// Помещает на вершину стека вторую половину числа x
        call    std::fabs(long double)  // Вызывает функцию std::fabs для long double
        addq    $16, %rsp		// Затирает скопированное значение x на вершине стека
        movq    .LC4(%rip), %rax	// Помещает в регистр %rax число, находящееся по метке .LC4 (2 * pi)
        leaq    -16(%rsp), %rsp		// Выделяет 16 байт на вершине стека
        fstpt   (%rsp)			// Помещает в выделенные 16 байт число из вершины стека сопроцессора - результат функции std::fabs()
        movq    %rax, %xmm0		// Копирует значение из регистра %rax в регистр %xmm0

        call    __gnu_cxx::__promote_2<decltype (((__gnu_cxx::__promote_2<long double, std::__is_integer<long double>::__value>::__type)(0))+((__gnu_cxx::__promote_2<double, std::__is_integer<double>::__value>::__type)(0))), std::__is_integer<decltype (((__gnu_cxx::__promote_2<long double, std::__is_integer<long double>::__value>::__type)(0))+((__gnu_cxx::__promote_2<double, std::__is_integer<double>::__value>::__type)(0)))>::__value>::__type std::fmod<long double, double>(long double, double)
					// Вызывает функцию fmod() от двух аргументов

        addq    $16, %rsp		// "Затирает" скопированное значение fabs(x) на вершине стека
        fstpt   16(%rbp)		// Записывает число из вершины стека сопроцессора в стек оперативной памяти по адресу (%rbp)+16 и удаляет число из стека сопроцессора (x = fmod())
        fldt    .LC5(%rip) 		// Записывает вещественное число по метке .LC5 в вершину стека сопроцессора (long double pi)
        fldt    16(%rbp)		// Записывает вещественное число из стека оперативной памяти в вершину стека сопроцессора (x = fmod())
        fcomip  %st(1), %st		// Сравнивает значение числа pi и x с установкой EFLAGS, выталкивает x
        fstp    %st(0)			// Очищает вершину стека сопроцессора
        jbe     .L20			// Если pi >= x, то переходит на метку .L20
        fldt    16(%rbp)		// Записывает вещественное число из стека оперативной памяти в вершину стека сопроцессора (x = fmod())
        fldt    .LC5(%rip)		// Записывает вещественное число по метке .LC5 в вершину стека сопроцессора (long double pi)
        fsubrp  %st, %st(1)		// Вычитает значение %st из значения %st(1), запоминает его в %st(1), выталкивает %st, делая %st(1) - вершиной стека (x - pi)
        fstpt   16(%rbp)		// Записывает на место x = fmod() новое значени x из стека сопроцессора, удаляя значение из стека сопроцессора (x -= pi)
        negl    -4(%rbp)		// Меняет знак у числа sign
.L20:
        fldt    .LC6(%rip)		// Записывает вещественное число по метке .LC6 в вершину стека сопроцессора (long double pi/2)
        fldt    16(%rbp)		// Записывает вещественное число из стека оперативной памяти в вершину стека сопроцессора (x)
        fcomip  %st(1), %st		// Сравнивает значение числа x с pi/2 с установкой EFLAGS, выталкивает x
        fstp    %st(0)			// Очищает стек сопроцессора
        jbe     .L22			// Если x <= pi/2, то переходит на метку .L22
        fldt    .LC5(%rip)		// Записывает вещественное число по метке .LC5 в вершину стека сопроцессора (long double pi)
        fldt    16(%rbp)		// Записывает вещественное число из стека оперативной памяти в вершину стека сопроцессора (x = fmod())
        fsubrp  %st, %st(1)		// Вычитает значение %st из значения %st(1), запоминает его в %st(1), выталкивает %st, делая %st(1) - вершиной стека (pi - x)
        fstpt   16(%rbp)		// Записывает на место x новое значени x из стека сопроцессора, удаляя значение из стека сопроцессора (x)
.L22:
        fldz				// Загружает в стек сопроцессора число 0
        fstpt   -32(%rbp)		// Записывает вещественное число из вершины стека сопроцессора в стек оперативной памяти по адресу (%rbp)-32, выталкивает число из стека сопроцессора (result)
        movq    $1, -40(%rbp)		// Записывает в Оперативную память число 1 по адресу (%rbp)-40 (i)
        jmp     .L24			// Перескакивает на метку .L24
.L27:
        movq    -40(%rbp), %rax		// Загружает в регистр %rax значение из оперативной памяти по адресу (%rbp)-40 (i)
        subq    $1, %rax		// Вычитает число 1 из значения регистра %rax (i - 1)
        fld1				// Записывает в стек сопроцессора число 1
        fchs				// Меняет знак у вершины стека сопроцессора
        leaq    -16(%rsp), %rsp		// Выделяет 16 байт на вершине стека
        fstpt   (%rsp)			// Записывает число из вершины стека сопроцессора в вершину стека оперативной памяти
        movq    %rax, %rdi		// Копирует значение регистра %rax в регистр %rdi (i - 1)

        call    power(long double, unsigned long)
					// Вызывает функцию power от двух аргументов

        addq    $16, %rsp		// "Зачищает" выделенную память
        fstpt   -96(%rbp)		// Записывает вещественное число из вершины стека сопроцессора и выталкивает его (power)
        movq    -40(%rbp), %rax		// Помещает значение из стека по адресу (%rbp)-40 в регистр %rax (i)
        addq    %rax, %rax		// Удваивает значение в %rax (2 * i)
        subq    $1, %rax		// Отнимает единицу из значения в %rax (2 * i - 1)
        pushq   24(%rbp)		// Помещает на вершину стека значение по адресу (%rbp)+24 (x)
        pushq   16(%rbp)		// Помещает на вершину стека значение по адресу (%rbp)+24 (x) 
        movq    %rax, %rdi		// Копирует значение из регистра %rax в регистр %rdi (2 * i - 1)

        call    power(long double, unsigned long)
					// Вызывает функцию power от двух переменных

        addq    $16, %rsp		// Зачищает выделенную память на вершине стека, которая использовалась для передачи аргументов в функцию
        fldt    -96(%rbp)		// Загружает число из оперативной памяти по адресу (%rbp)-96 в стек сопроцессора (power(-1))
        fmulp   %st, %st(1)		// Умножает значение в регистре %st на значение в регистре %st(1), сохраняет значение в регистре %st(1) и выталкивает значение %st
        fstpt   -96(%rbp)		// Загружает значение из стека сопроцессора в стек оперативной памяти по адресу (%rbp)-96 (power * power)
        movq    -40(%rbp), %rax		// Помещает значение из оперативной памяти по адресу (%rbp)-40 в регистр %rax (i)
        addq    %rax, %rax		// Удваивает значение в регистре %rax (2 * i)
        subq    $1, %rax		// Отнимает из значения в регистре %rax число 1 (2 * i - 1)
        movq    %rax, %rdi		// Копирует значение регистра %rax в регистр %rdi (2 * i - 1)
        call    factorial(unsigned long)// Вызывает функцию factorial от одной переменной
        fldt    -96(%rbp)		// Помещает значение из оперативной памяти по адресу (%rbp)-96 в стек сопроцессора (power * power)
        fdivp   %st, %st(1)		// Делит значение в регистре %st(1) на значение в регистре %st, записывает результат в регистре %st(1) и выталкивает значение %st (buf)
        fstpt   -64(%rbp)		// Записывает число из стека сопроцессора в оперативную память по адрессу (%rbp)-64, после чего выталкивает его из стека сопроцессора (buf)
        pushq   -56(%rbp)		// Помещает на вершину стека первую половину long double (buf)
        pushq   -64(%rbp)		// Помещает на вершину стека вторую половину long double (buf)
        call    std::isnan(long double) // Вызывает функцию std::isnan от одного аргумента
        addq    $16, %rsp		// Зачищает 16 байт на вершине стека
        testb   %al, %al		// Проверяет число в регистре %al
        je      .L25			// Отправляется на метку .L25 если флаг ZF = 1
        fldt    -32(%rbp)		// Загружает число из оперативной памяти по адресу (%rbp)-32 в стек сопроцессора (result)
        fldz				// Загружает число 0 в стек сопроцессора
        faddp   %st, %st(1)		// Складывает значение в регистре %st со значением в регистре %st(1), помещает значение в регистр %st(1), выталкивает значение %st (result += 0)
        fstpt   -32(%rbp)		// Загружает значение из стека сопроцессора в стек оперативной памяти по адресу (%rbp)-32 (result += 0)
        jmp     .L26			// Безусловный переход на метку .L26
.L25:
        fldt    -32(%rbp)		// Загружает число из оперативной памяти по адресу (%rbp)-32 в стек сопроцессора (result)
        fldt    -64(%rbp)		// Загружает число из оперативной памяти по адресу (%rbp)-64 в стек сопроцессора (buf)
        faddp   %st, %st(1)		// Складывает значение в регистре %st со значением в регистре %st(1), помещает значение в регистр %st(1), выталкивает значение %st (result += buf)
        fstpt   -32(%rbp)		// Загружает значение из стека сопроцессора в стек оперативной памяти по адресу (%rbp)-32 (result += buf)
.L26:
        addq    $1, -40(%rbp)		// Прибавляет к значению в оперативной памяти по адресу (%rbp)-40 число 1 (i++)
.L24:
        movq    -40(%rbp), %rax		// Помещает число из стека по адрресу (%rbp)-40 в регистр %rax (i)
        cmpq    %rax, -72(%rbp)		// Сравнивает число в регистре %rax и в оперативной памяти по адресу rbp-72 (i и n)
        jnb     .L27			// Если i <= n, то переходит на метку .L27
        fildl   -4(%rbp)		// Загружает в стек сопроцессора целое число из оперативной памяти по адресу (%rbp)-4 (sign)
        fldt    -32(%rbp)		// Загружает в стек сопроцессора число из оперативной памяти по адресу (%rbp)-32 (result)
        fmulp   %st, %st(1)		// Перемножает числа из стека сопроцессора %st и %st(1), помещает результат в %st(1) и выталкивает %st (result * sign)
        leave				// Возвращает значения кадра и стека
        ret				// Выход из функции
.LC9: // Метки с константными строками
        .string "Answer: "
.LC10:
        .string "Time: "
.LC12:
        .string "s"
main:
        pushq   %rbp 		 	// Помещает значение регистра %rbp в стек, сохраняет указатель кадра вызвашей программы
        movq    %rsp, %rbp 	 	// Копирует значение регистра %rsp в регистр %rbp, формирует начало кадра локальных переменных
        pushq   %rbx 		 	// Помещает значение регистра %rbx в стек, так как в дальнейшем регистр будет использоваться
        subq    $72, %rsp 	 	// Отнимает из значения регистра %rsp число 72, "выделяя" 72 байта на стеке
        movl    %edi, -52(%rbp)  	// Копирует значение регистра %edi в стек по адресу (%rbp)-52 (argc)
        movq    %rsi, -64(%rbp)  	// Копирует значение регистра %rsi в стек по адресу (%rbp)-64 (argv[][])
        movq    -64(%rbp), %rax  	// Копирует значение из стека в регистр %rax (argv[][])
        addq    $8, %rax 	 	// Прибавляет к значению регистра %rax число 8 (&argv[1][])
        movq    (%rax), %rax 	 	// Переходит по адресу, хранящемуся в %rax, и записывает значение по этому адресу в %rax (argv[1][])
        movq    %rax, %rdi 	 	// Копирует значение регистра %rax в регистр %rdi (argv[1][])
        call    atoll 		 	// Запоминает адрес следующей команды (movq) и вызывает функцию atoll, после выполнения которой переходит к следующей за ней (movq)
					// Вызывает функцию, переводящую строку в 8-байтовое число, и возвращает его через регистр %rax
        movq    %rax, -24(%rbp)  	// Копирует значение регистра %rax в стек по адресу (%rbp)-24 (numberOfElements = atoll)
        fldt    .LC8(%rip) 	 	// Загружает вещественное число по метке .LC8 на вершину стека сопроцессора (long double x = 10)
        fstpt   -48(%rbp)  	 	// Записывает вещественное число в стек оперативной памяти и «выталкивает» его из стека сопроцессора (x)
        movl    $.LC9, %esi 	 	// помещает адрес метки со строкой “Answer: “ в регистр %esi (“Answer: “)
        movl    $_ZSt4cout, %edi 	// помещает адрес объекта cout в регистр %edi (cout)

        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) 
					// Запоминает адрес следующей команды (movq) и вызывает оператор <<, после выполнения которого переходит к следующей за оператором функции (movq)
					// Выводит строку по метке .LC9 (“Answer: “)

        movq    %rax, %rbx 		// Копирует значение регистра %rax в регистр %rbx (результат оператора <<)
        movq    -24(%rbp), %rax 	// Копирует значение из оперативной памяти (numberOfElements) в регистр %rax
        pushq   -40(%rbp) 		// Копирует на вершину стека первую половину значения long double x
        pushq   -48(%rbp) 		// Копирует на вершину стека вторую половину значения long double x
        movq    %rax, %rdi 		// Копирует в регистр %rdi значение регистра %rax (numberOfElements)

        call    Sin(long double, unsigned long) 
					// Сохраняет адрес функции addq в стек, вызывает функцию Sin(), после чего возвращается к функции addq, в дальнейшем запоминание функции, к которой нужно вернуться, считаем по умолчанию выполненным для функции call

        addq    $16, %rsp 		// Выкидывает верхние 16 байт из стека
        leaq    -16(%rsp), %rsp 	// Выделяет 16 байт на вершине стека (помещает в %rsp адрес (%rsp) – 16)
        fstpt   (%rsp) 			// Записывает в вершину стека оперативной памяти число с вершины стека сопроцессора и выталкивает это число с вершины стека сопроцессора (Sin())
        movq    %rbx, %rdi 		// Копирует значение из регистра %rbx в регистр %rdi (cout)

        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(long double) 
					// Выводит long double Sin()

        addq    $16, %rsp 		// "Затирает" 16 байт, в которых хранился long double Sin()

        movl    $_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi (std::endl)
					// Перемещает адрес функции std::endl в регистр %esi

        movq    %rax, %rdi 		// Копирует значение регистра %rax в регистр %rdi (cout <<)

        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&)) 
					// Вызывает оператор вывода в поток cout для std::endl;

        movl    $.LC10, %esi 		// Помещает адрес метки со строкой “Time: “ в регистр %esi ("Time: ")
        movl    $_ZSt4cout, %edi 	// Помещает в регистр %edi адрес объекта cout (cout)

        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) 
					// Выводит строку, адрес которой хранится в %esi

        movq    %rax, %rbx 		// Копирует значение из регистра %rax в регистр %rbx (cout <<)
        call    clock 			// Вызывает функцию, которая вернет количество квантов процессора, прошедших с момента запуска подпрограммы
        movq    %rax, -72(%rbp) 	// Помещает значение регистра %rax (результат функции clock()) по адресу (%rbp)-72 (Результат clock())
        fildq   -72(%rbp) 		// берет результат функции clock() и загружает в сопроцессор на вершину стека    (Результат clock())
        fldt    .LC11(%rip) 		// Загружает вещественное число по метке .LC11 в сопроцессор на вершину стека (CLOCKS_PER_SEC)
        fdivrp  %st, %st(1) 		// Делит значение в регистре %st(1) на значение в регистре %st, записывает его в регистр %st(1), и выталкивает из стекового регистра %st, делая %st(1) - вершиной (clock() / CLOCKS_PER_SEC)
        leaq    -16(%rsp), %rsp 	// Выделяет 16 байт на стеке
        fstpt   (%rsp) 			// помещает на вершину стека результат деления в сопроцессоре (clock() / CLOCKS_PER_SEC)
        movq    %rbx, %rdi 		// Копирует значение из регистра %rbx в регистр %rdi (cout <<)

        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(long double) 
					// Вызывает оператор вывода long double

        addq    $16, %rsp 		// Затирает только что выведенное значение
        movl    $.LC12, %esi 		// Помещает адрес строки в регистр %esi ("s")
        movq    %rax, %rdi 		// Помещает значение регистра %rax в регистр %rdi (cout <<)

        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*) 
					// Вызывает оператор для вывода строк

        movl    $_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi (std::endl)
					// Помещает адрес функции std::endl в регистр %esi

        movq    %rax, %rdi 		// Помещает значение регистра %rax в регистр %rdi (cout <<)

        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&)) 
					// Вызывает оператор для вывода std::endl

        movl    $0, %eax 		// Помещает 0 в регистр %rax
        movq    -8(%rbp), %rbx 		// Восстанавливает значение %rbx
        leave 				// Эквивалентно movq %rbp %rsp; popq %rbp – восстанавливает значения кадра и стека до исходных состояний
        ret 				// Выходит из подпрограммы

__static_initialization_and_destruction_0(int, int):
        pushq   %rbp 			// Запоминает значение регистра %rbp – указатель кадра вызвавшей подпрограммы
        movq    %rsp, %rbp 		// Помещает в регистр %rbp значение регистра %rsp, тем самым формируя указатель начало кадра локальных переменных
        subq    $16, %rsp 		// Резервирует место из 16 байт в стеке
        movl    %edi, -4(%rbp) 		// Копирует значение из регистра %edi в оперативную память
        movl    %esi, -8(%rbp) 		// Копирует значение из регистра %edi в оперативную память
        cmpl    $1, -4(%rbp) 		// Сравнивает значения 1 и значение в оперативной памяти по адресу (%rbp)-4
        jne     .L39			// Если 1 != значение в оперативной памяти по адресу (%rbp)-4, то переходит на метку .L39
        cmpl    $65535, -8(%rbp)	// Сравнивает значения 65535 и значение в оперативной памяти по адресу (%rbp)-8
        jne     .L39			// Если 65535 != значение в оперативной памяти по адресу (%rbp)-8, то переходит на метку .L39
        movl    $_ZStL8__ioinit, %edi	
        call    std::ios_base::Init::Init() [complete object constructor]
        movl    $__dso_handle, %edx
        movl    $_ZStL8__ioinit, %esi
        movl    $_ZNSt8ios_base4InitD1Ev, %edi
        call    __cxa_atexit
.L39:
        nop				// Нет операции
        leave				// Восстанавливает значение кадра и стека
        ret				// Выходит из функции
_GLOBAL__sub_I_power(long double, unsigned long):
        pushq   %rbp			// Запоминает значение регистра %rbp – указатель кадра вызвавшей подпрограммы
        movq    %rsp, %rbp		// Помещает в регистр %rbp значение регистра %rsp, тем самым формируя указатель начало кадра локальных переменных
        movl    $65535, %esi		// Записывает в регистр %esi число 65535
        movl    $1, %edi		// Записывает в регистр %edi число 1

        call    __static_initialization_and_destruction_0(int, int)
					// Вызывает функцию от двух переменных

        popq    %rbp			// Возвращает указатель кадра
        ret				// Выходит из функции
.LC2: // 18446744073709551616.0000000
        .long   0
        .long   -2147483648
        .long   16447
        .long   0
.LC4: // double 2 * pi
        .long   1413754136
        .long   1075388923
.LC5: // long double pi
        .long   560513024
        .long   -921707870
        .long   16384
        .long   0
.LC6: // long double pi/2
        .long   560513024
        .long   -921707870
        .long   16383
        .long   0
.LC8: 	// long double x = 10;
        .long   0
        .long   -1610612736
        .long   16386
        .long   0
.LC11: // CLOCKS_PER_SEC
        .long   0
        .long   -198967296
        .long   16402
        .long   0

